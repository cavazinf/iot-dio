import cv2
import numpy as np

# Carregar o modelo YOLO
net = cv2.dnn.readNet('yolov3.weights', 'yolov3.cfg')

# Carregar as classes
classes = []
with open('coco.names', 'r') as f:
    classes = f.read().strip().split('\n')

# Carregar imagem de entrada
image = cv2.imread('input.jpg')

# Obter as dimensões da imagem
height, width, _ = image.shape

# Normalizar a imagem e redimensionar para o tamanho de entrada do modelo
blob = cv2.dnn.blobFromImage(image, 1/255, (416, 416), (0, 0, 0), True, crop=False)

# Definir as classes que você deseja detectar
target_classes = ["person", "car", "dog"]  # Personalize com suas classes

# Definir confiança mínima para detecção
conf_threshold = 0.5

# Detectar objetos na imagem
net.setInput(blob)
outs = net.forward(net.getUnconnectedOutLayersNames())

# Listas para armazenar informações de detecção
class_ids = []
confidences = []
boxes = []

# Processar resultados
for out in outs:
    for detection in out:
        scores = detection[5:]
        class_id = np.argmax(scores)
        confidence = scores[class_id]

        if confidence > conf_threshold and classes[class_id] in target_classes:
            center_x = int(detection[0] * width)
            center_y = int(detection[1] * height)
            w = int(detection[2] * width)
            h = int(detection[3] * height)

            # Coordenadas do retângulo
            x = int(center_x - w / 2)
            y = int(center_y - h / 2)

            class_ids.append(class_id)
            confidences.append(float(confidence))
            boxes.append([x, y, w, h])

# Aplicar a supressão não máxima para eliminar detecções duplicadas
indices = cv2.dnn.NMSBoxes(boxes, confidences, conf_threshold, 0.4)

# Desenhar as caixas delimitadoras nas detecções
for i in indices:
    i = i[0]
    box = boxes[i]
    x, y, w, h = box
    label = str(classes[class_ids[i]])
    confidence = confidences[i]
    color = (0, 255, 0)  # Cor da caixa (verde)
    cv2.rectangle(image, (x, y), (x + w, y + h), color, 2)
    cv2.putText(image, f'{label} {confidence:.2f}', (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)

# Exibir imagem com detecções
cv2.imshow('Detected Objects', image)
cv2.waitKey(0)
cv2.destroyAllWindows()
